#nginx.conf配置文件解析(http、server、location)
#https://blog.csdn.net/chenweijiSun/article/details/70823482

#VSCODE 列编辑：Shift+Alit+鼠标左键拖动

 #详细配置http://tengine.taobao.org/nginx_docs/cn/docs/http/ngx_http_core_module.html#location
#	location = / {
#		[ configuration A ]
#	}
#
#	location / {
#		[ configuration B ]
#	}
#
#	location /documents/ {
#		[ configuration C ]
#	}
#
#	location ^~ /images/ {
#		[ configuration D ]
#	}
#
#	location ~* \.(gif|jpg|jpeg)$ { 
#		[ configuration E ] 
#	} 
#	请求“/”匹配配置A， 请求“/index.html”匹配配置B， 请求“/documents/document.html”匹配配置C， 请求“/images/1.gif”匹配配置D， 请求“/documents/1.jpg”匹配配置E。
#
#	前缀“@”定义了命名路径。这种路径不在一般的请求处理中使用， 而是用在请求重定向中。这些路径不能嵌套，也不能包含嵌套路径。


upstream tomcat_server{
	server 127.0.0.1:8080;
}
lua_package_path "D:\\SoftwareGree\\openresty-1.13.6.2-win64\\lualib\\?.lua;;";
lua_package_cpath "D:\\SoftwareGree\\openresty-1.13.6.2-win64\\conf\\lua\\lualib\\?.dll;;";
server {
	listen 8110;
	server_name _;
	location /{
		#proxy_pass http://tomcat_server/;

		lua_code_cache off;  #默认是缓存的，每次修改了lua,nginx必须reload
		#content_by_lua 'ngx.say("hello world")';
		default_type text/html;
		content_by_lua_file conf/lua/hello.lua; #相对于nginx安装目录
		#header_filter_by_lua_file  conf/lua/test2.lua; #相对于nginx安装目录
		#access_by_lua_file conf/lua/test3.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
		#access_by_lua_file conf/lua/checkcookie.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
	}
	location ~ .*\.(html|htm|ico|png|jpg|jpeg|js|css|bmp)$ {
		proxy_pass http://tomcat_server;
	}
	# 设置转发的 url
	# @tomcat 命名的location
	location @tomcat {
		proxy_pass http://127.0.0.1:8080; #nginx访问tomcat静态资源非常慢（localhost）；必须写成127.0.0.1即可。
	}
}

#server 就是虚拟主机
server{
	listen 8120;
	server_name _;  #这里可以配置域名
	location = /{ #详细配置http://tengine.taobao.org/nginx_docs/cn/docs/http/ngx_http_core_module.html#location
		#解决跨域问题
		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Headers' 'Content-Type';
			return 204;
		}   
		if ($request_method = 'POST') {
			add_header 'Access-Control-Allow-Origin' '*';
		}   
		#proxy_pass http://tomcat_server/;

		lua_code_cache off;  #默认是缓存的，每次修改了lua,nginx必须reload
		#content_by_lua 'ngx.say("hello world")';
		default_type text/html;
		content_by_lua_file conf/lua/app.lua; #相对于nginx安装目录
		#header_filter_by_lua_file  conf/lua/test2.lua; #相对于nginx安装目录
		#access_by_lua_file conf/lua/test3.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
		#access_by_lua_file conf/lua/checkcookie.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
	}

	location /{
		#解决跨域问题
		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Headers' 'Content-Type';
			return 204;
		}   
		if ($request_method = 'POST') {
			add_header 'Access-Control-Allow-Origin' '*';
		}   
		#proxy_pass http://tomcat_server/;

		lua_code_cache off;  #默认是缓存的，每次修改了lua,nginx必须reload
		#content_by_lua 'ngx.say("hello world")';
		default_type text/html;
		content_by_lua_file conf/lua/hello.lua; #相对于nginx安装目录
		#header_filter_by_lua_file  conf/lua/test2.lua; #相对于nginx安装目录
		#access_by_lua_file conf/lua/test3.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
		#access_by_lua_file conf/lua/checkcookie.lua; #相对于nginx安装目录；请求访问阶段处理，用于访问控制
	}
}